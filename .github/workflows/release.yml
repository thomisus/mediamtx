name: release

on:
  push:
    tags:
    - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  binaries:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - run: make binaries
      env:
        CHECKSUM: '1'

    - uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: binaries

  github_release:
    needs: binaries
    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@v4
      with:
        name: binaries
        path: binaries

    - uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs').promises;
          const { repo: { owner, repo } } = context;

          const currentRelease = context.ref.split('/')[2];

          let body = `## New major features\n\n`
            + `TODO\n\n`
            + `## Fixes and improvements\n\n`
            + `TODO\n\n`
            + `## Security\n\n`
            + `Binaries have been produced by the [Release workflow](https://github.com/${owner}/${repo}/actions/workflows/release.yml)`
            + ` without human intervention.\n\n`
            + `SHA256 checksums:\n\n`;

          for (const name of await fs.readdir('./binaries/')) {
            if (name.endsWith('.sha256sum')) {
              const parts = (await fs.readFile(`./binaries/${name}`, 'utf-8')).slice(0, -1).split(' ');
              body += `* ${parts[2]} ${parts[0]}\n`;
            }
          }

          const res = await github.rest.repos.createRelease({
            owner,
            repo,
            tag_name: currentRelease,
            name: currentRelease,
            body,
          });
          const release_id = res.data.id;

          for (const name of await fs.readdir('./binaries/')) {
            await github.rest.repos.uploadReleaseAsset({
              owner,
              repo,
              release_id,
              name,
              data: await fs.readFile(`./binaries/${name}`),
            });
          }

  github_notify_issues:
    needs: github_release
    runs-on: ubuntu-latest

    steps:
    - uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { repo: { owner, repo } } = context;

          const tags = await github.rest.repos.listTags({
            owner,
            repo,
          });

          const curTag = tags.data[0];
          const prevTag = tags.data[1];

          const diff = await github.rest.repos.compareCommitsWithBasehead({
            owner,
            repo,
            basehead: `${prevTag.commit.sha}...${curTag.commit.sha}`,
          });

          const issues = {};

          for (const commit of diff.data.commits) {
            for (const match of commit.commit.message.matchAll(/(^| |\()#([0-9]+)( |\)|$)/g)) {
              issues[match[2]] = 1;
            }
          }

          for (const issue in issues) {
            try {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: parseInt(issue),
                body: `This issue is mentioned in release ${curTag.name} ðŸš€\n`
                  + `Check out the entire changelog by [clicking here](https://github.com/${owner}/${repo}/releases/tag/${curTag.name})`,
              });
            } catch (exc) {}
          }

  dockerhub:
    needs: binaries
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/download-artifact@v4
      with:
        name: binaries
        path: binaries

    - run: make dockerhub
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  api_docs:
    needs: binaries
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - run: make apidocs

    - run: mv apidocs/*.html apidocs/index.html

    - uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./apidocs

  docker_github:
    needs: binaries
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/download-artifact@v4
      with:
        name: binaries
        path: binaries

    - name: Log in to the Container registry
      uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
      
    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v2
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
        subject-digest: ${{ steps.push.outputs.digest }}
        push-to-registry: true
     




